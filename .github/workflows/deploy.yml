name: Deploy Schema Editor to GitHub Pages

on:
  workflow_run:
    workflows: ["Build Schema Editor"]
    types:
      - completed
    branches: [main]

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: schema-editor-dist
          path: dist
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Read version
        id: version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          VERSION=v${{ steps.version.outputs.version }}
          git fetch --tags
          if git tag | grep -q "$VERSION"; then
            echo "Tag $VERSION giÃ  esistente, salto creazione."
          else
            git config user.name "github-actions"
            git config user.email "github-actions@users.noreply.github.com"
            git tag $VERSION
            git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} $VERSION
            echo "Creato e pushato il tag $VERSION"
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Prepare deployment with versioning
        run: |
          VERSION=v${{ steps.version.outputs.version }}
          mkdir -p _site
          
          # Crea cartella versione specifica
          mkdir -p _site/$VERSION
          cp -r dist/* _site/$VERSION/
          
          # Aggiorna 'latest'
          rm -rf _site/latest
          mkdir -p _site/latest
          cp -r dist/* _site/latest/
          
          # Pulisci versioni vecchie (mantieni ultime 3)
          cd _site
          ls -1d v*/ 2>/dev/null | sort -V | head -n -3 | xargs -r rm -rf
          
          # Crea file di riferimento per WordPress
          VERSIONS=$(ls -1d v*/ 2>/dev/null | sort -V | jq -R -s -c 'split("\n") | map(select(. != ""))')
          echo "{\"latest\": \"latest\", \"versions\": $VERSIONS}" > versions.json

      - name: Upload artifact to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4